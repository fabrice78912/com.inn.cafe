name: CI - Build, Scan, Push and Trigger CD

on:
  push:
    branches: ['**']        # Toutes les branches
  pull_request:
    branches: [main, dev, 'rc-*']        # Toutes les branches aussi

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  ECR_REPO: ${{ secrets.ECR_REPO }}
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  REPO_DEPLOY: ${{ secrets.REPO_DEPLOY }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  REPO_NAME: ${{ secrets.REPO_NAME }}

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build and run tests
        run: mvn clean install -DskipTests=false

      # Optionnel : Analyse SonarQube ou autres vÃ©rifications
      # - name: Run SonarQube scanner
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: sonar-scanner

  build-push:
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsECRRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment tag with date
        id: tag
        run: |
          SHA=$(echo ${{ github.sha }} | cut -c1-8)
          DATE=$(date +%Y%m%d-%H%M%S)
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            BASE="${{ github.base_ref }}"
            if [[ "$BASE" == "dev" ]]; then
              TAG="feature-${BASE}-${SHA}-${DATE}"
              ENV="feature"
            elif [[ "$BASE" == rc-* ]]; then
              TAG="feature-staging-${SHA}-${DATE}"
              ENV="staging"
            elif [[ "$BASE" == "main" ]]; then
              TAG="feature-prod-${SHA}-${DATE}"
              ENV="prod"
            else
              TAG="feature-${BASE}-${SHA}-${DATE}"
              ENV="feature"
            fi
          else
            BRANCH="${{ github.ref }}"
            if [[ "$BRANCH" == "refs/heads/main" ]]; then
              TAG="prod-${SHA}-${DATE}"
              ENV="prod"
            elif [[ "$BRANCH" == "refs/heads/dev" ]]; then
              TAG="dev-${SHA}-${DATE}"
              ENV="dev"
            else
              TAG="fix-bug-pro-${SHA}-${DATE}"
              ENV="prod"
            fi 
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "env=$ENV" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: docker build -t $ECR_REGISTRY/${{ env.REPO_NAME }}:${{ steps.tag.outputs.tag }} .

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Push Docker image
        run: docker push $ECR_REGISTRY/${{ env.REPO_NAME }}:${{ steps.tag.outputs.tag }}

      - name: Trigger CD
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ env.PERSONAL_ACCESS_TOKEN }}
          repository: ${{ env.REPO_DEPLOY }}
          event-type: deploy
          client-payload: |
            {
              "branch": "${{ github.ref_name }}",
              "image_tag": "${{ steps.tag.outputs.tag }}",
              "environment": "${{ steps.tag.outputs.env }}",
              "microservice": "microservice-a"
            }
