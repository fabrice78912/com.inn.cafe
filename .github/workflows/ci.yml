name: CI - Build, Scan, Push and Trigger CD

on:
  push:
    branches:
      - main
      - dev
      - 'feature/**'        # DÃ©clenche sur toutes les branches feature/*
  pull_request:
    branches:
      - dev
      - main
      - 'rc-*'


permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      ECR_REPO: ${{ secrets.ECR_REPO }}
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      REPO_DEPLOY: ${{ secrets.REPO_DEPLOY }}
      ENV: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'dev' && 'dev' || 'feature' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsECRRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set Docker image tag
        id: tag
        run: |
          SHA=$(echo ${{ github.sha }} | cut -c1-8)
          BRANCH=${GITHUB_REF#refs/heads/}

          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            BASE=${{ github.base_ref }}
            if [[ "$BASE" == "dev" ]]; then
              TAG="feature-${SHA}"
            elif [[ "$BASE" == rc-* ]]; then
              TAG="staging-${SHA}"
            else
              TAG="pr-${SHA}"
            fi
          elif [[ "$BRANCH" == "main" ]]; then
            TAG="prod-${SHA}"
          elif [[ "$BRANCH" == "dev" ]]; then
            TAG="dev-${SHA}"
          elif [[ "$BRANCH" == feature/* ]]; then
            FEATURE_NAME=${BRANCH#feature/}
            TAG="feature-${FEATURE_NAME}-${SHA}"
          else
            TAG="unknown-${SHA}"
          fi

          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .

      - name: Build and Test
        run: mvn clean install -DskipTests=false

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: docker build -t ${{ env.ECR_REPO }}:${{ steps.tag.outputs.tag }} .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REPO }}:${{ steps.tag.outputs.tag }}
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

      - name: Push Docker image
        run: docker push ${{ env.ECR_REPO }}:${{ steps.tag.outputs.tag }}

      - name: Trigger CD workflow in another repo
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ env.PERSONAL_ACCESS_TOKEN }}
          repository: ${{ env.REPO_DEPLOY }}
          event-type: deploy
          client-payload: >-
            {
              "branch": "${{ github.ref_name }}",
              "image_tag": "${{ steps.tag.outputs.tag }}",
              "environment": "${{ env.ENV }}",
              "microservice": "microservice-a"
            }



#name: CI Pipeline
#
#on:
#  push:
#    branches: [ "main" ]
#
#jobs:
#
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Login Dockerhub
#        env:
#          DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
#          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
#        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
#
#      - name: Build the Docker image
#        run: docker build -t fabrice7891/cafe-system .
#      - name: Push to Dockerhub
#        run: docker push fabrice7891/cafe-system:latest